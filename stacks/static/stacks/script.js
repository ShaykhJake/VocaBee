/*jshint esversion: 6 */

/* 
script.js is the core JS engine for VocaBee.
It functions as a SPA for a seamless user experience.

This script requires three variables to be declared in the
calling .html file:
- {boolean} authenticated - is the user logged in?
- {string} authenticatedUsername - username of the logged in user
- {string} csrfToken - the token generated by the Django server, needed
  for CRUD API requests

There is one external module, learn.js, which contains
the functions for the learning exercises
*/

// Import the learn module of functions
import * as learn from "./learn.js";

// Set initial display and set links upon DOM rendering
document.addEventListener("DOMContentLoaded", function () {
  // Use buttons to toggle between views
  document.querySelector("#index_link").addEventListener("click", () => renderIndex());
  renderIndex();
});

/** Renders the main index landing page */
function renderIndex() {
  hideBuilder();
  hideStackViewer();
  hideLearning();
  document.querySelector("#index_div").style.display = "block";
  if (authenticated) {
    const addButton = document.querySelector("#add_button");
    addButton.addEventListener("click", function (event) {
      event.preventDefault();
      addStack();
    });
    fetchPersonalStacks();
  }
  fetchCommunityStacks();
}

/** Hides the index container */
function hideIndex() {
  document.querySelector("#index_div").style.display = "none";
}

/** Hides the card stack builder container */
function hideBuilder() {
  document.querySelector("#builder_div").style.display = "none";
}

/** Hides the stack viewer container */
function hideStackViewer() {
  document.querySelector("#stack_viewer_div").style.display = "none";
}

/** Hides the learning exercises container */
function hideLearning() {
  const learningDiv = document.querySelector("#stack_learn_div");
  learningDiv.style.display = "none";
  learningDiv.innerHTML = "";
}

/** Shows the container for personal stacks list*/
function showPersonalStacks() {
  document.querySelector("#pers_stack_div").style.display = "flex";
}

/**
 * API call to fetch the user's personal stacks and then
 * feeds the payload into the renderStacksList function
 */
function fetchPersonalStacks() {
  showPersonalStacks();
  let endpoint = `stacks/persstacks/`;
  fetch(endpoint)
    .then((response) => response.json())
    .then((data) => {
      const targetDiv = document.querySelector("#pers_stack_div");
      if (data.stacks.length > 0) {
        renderStacksList(data.stacks, targetDiv);
      } else {
        targetDiv.innerHTML = `
          <p>You do not currently have any personal stacks. Please click the
          add button to build one.</p>
        `;
      }
    });
}

/** Shows the container for list of publicly available card stacks */
function showCommunityStacks() {
  document.querySelector("#comm_stack_div").style.display = "flex";
}

/**
 * API call to fetch public stacks and then
 * feeds the payload into the renderStacksList function
 */
function fetchCommunityStacks() {
  showCommunityStacks();
  fetch("stacks/commstacks/")
    .then((response) => response.json())
    .then((data) => {
      const targetDiv = document.querySelector("#comm_stack_div");
      if (data.stacks.length < 1) {
        if (authenticated) {
          targetDiv.innerHTML = `
          <p>Sorry, but there are currently no vocabulary
          stacks that are publicly available.</p>
        `;
        } else {
          targetDiv.innerHTML = `
          <p>Sorry, guest, but there are currently no vocabulary
          stacks that are publicly available. Please either
          login or register to create your own stacks.</p>
        `;
        }
      } else {
        renderStacksList(data.stacks, targetDiv);
      }
    });
}

/**
 * Ingests an array of card stacks and then renders them in HTML
 * @param {array} stacks of cards
 * @param {object} targetDiv target html element for rendering
 */
function renderStacksList(stacks, targetDiv) {
  targetDiv.innerHTML = "";
  stacks.forEach((stack) => {
    const stackBlock = document.createElement("div");
    stackBlock.innerHTML = `
    <div class="card stack-block">
      <div class="card-header">
        <h5>${stack.name}</h5>
        <small class="text-muted">
        ${stack.card_count} 
        ${stack.card_count > 1 ? " cards" : stack.card_count == 0 ? " cards" : " card"}
        </small><br>
        <small class="text-muted">Curated by: ${
          stack.curator
        }</small><br>        
      </div>
      <div class="card-body">
        <p class="card-text">${stack.description}</p>
      </div>
      <div class="card-footer">
      <small class="text-muted">Last updated ${stack.updated}</small>
      </div>
      <div class="card-footer" id="stack_actions_${stack.id}">
        
      </div>
    </div>
    `;

    stackBlock.classList.add("col-md-4", "mb-2");
    targetDiv.appendChild(stackBlock);

    const stackActions = document.querySelector(`#stack_actions_${stack.id}`);

    if (stack.curator == authenticatedUsername) {
      stackActions.innerHTML = `
        <button class="btn btn-primary" id="view_stack_${stack.id}">View <i class="fas fa-binoculars"></i></button>
        <button class="btn btn-warning" id="edit_stack_${stack.id}">Edit <i class="fas fa-pen"></i></button>
        <button class="btn btn-secondary" id="delete_stack_${stack.id}">Delete <i class="fas fa-trash"></i></button>
      `;
      const editButton = document.querySelector(`#edit_stack_${stack.id}`);
      editButton.addEventListener("click", () => {
        showBuilder(stack);
      });
      const deleteButton = document.querySelector(`#delete_stack_${stack.id}`);
      deleteButton.addEventListener("click", () => {
        deleteStack(stack.id);
      });
    } else {
      stackActions.innerHTML = `
        <button class="btn btn-primary" id="view_stack_${stack.id}">View <i class="fas fa-binoculars"></i></button>
        <button class="btn btn-warning" id="fork_stack_${stack.id}">Fork <i class="fas fa-code-branch"></i></button>
        `;
      const forkButton = document.querySelector(`#fork_stack_${stack.id}`);
      if(authenticated){
        forkButton.addEventListener("click", () => {
          forkStack(stack.id);
        });
      } else {
        forkButton.style.display = "none";
      }
    }
    const viewButton = document.querySelector(`#view_stack_${stack.id}`);
    viewButton.addEventListener("click", () => {
      showStackViewer(stack.id);
    });
  });
}

/**
 * API call to fetch a specific cards stack by ID
 * @param {number} id
 * @returns stack object
 */
async function fetchStack(id) {
  const endpoint = `stack/${id}/`;
  const res = await fetch(endpoint);
  const data = await res.json();
  return data.stack;
}

/**
 * Sends and API call to post a new stack
 * @param {object} stack the stack to be created
 */
function submitNewStack(stack) {
  const endpoint = `stack/`;
  const payload = {
    method: "POST",
    body: JSON.stringify(stack),
    headers: {
      "X-CSRFToken": csrfToken,
    },
  };
  fetch(endpoint, payload)
    .then((response) => response.json())
    .then((data) => {
      // Render the stack builder with the new database information
      showBuilder(data.stack);
    });
}

/**
 * Sends and API call to update an existing
 * @param {object} stack the stack to be updated
 */
function submitStackUpdate(stack) {
  const endpoint = `stack/`;
  const payload = {
    method: "PATCH",
    body: JSON.stringify(stack),
    headers: {
      "X-CSRFToken": csrfToken,
    },
  };
  fetch(endpoint, payload)
    .then((response) => response.json())
    .then((data) => {
      // Render the stack builder with the new database information
      renderBuilder(data.stack);
    });
}

/**
 * Sends an API call to delete a stack
 * @param {number} stackID
 */
function deleteStack(stackID) {
  const endpoint = `stack/${stackID}/`;
  let payload = {
    method: "DELETE",
    headers: {
      "X-CSRFToken": csrfToken,
    },
  };
  fetch(endpoint, payload)
    .then((response) => response.json())
    .then((data) => {
      if (data.success) {
        renderIndex();
      } else {
        console.log(data.message);
      }
    });
}

/**
 * Adds a blank stack to the stack builder page
 */
function addStack() {
  hideIndex();
  const newStack = {
    name: "new name",
    description: "new description",
    public: true,
    updated: "12 Apr 2021",
    id: null,
  };
  showBuilder(newStack);
}

/**
 * Shows the stack builder container
 * @param {object} stack to be edited
 */
function showBuilder(stack) {
  hideIndex();
  hideStackViewer();
  hideLearning();
  const builderDiv = document.querySelector("#builder_div");
  builderDiv.style.display = "block";
  const builderCardsDiv = document.querySelector("#builder_cards_div");
  if (stack.id != null) {
    fetchStack(stack.id).then((data) => {
      renderBuilder(data);
      renderBuilderCards(data);
    });
  } else {
    renderBuilder(stack);
    builderCardsDiv.innerHTML = `
    <p>You must submit your new stack first before you can add cards to it</p>
    `;
  }
}

/**
 * Renders the stack builder functionality and fills in stack
 * object data
 * @param {object} stack to be edited
 */
function renderBuilder(stack) {
  const builderStackDiv = document.querySelector("#builder_stack_info_div");
  builderStackDiv.innerHTML = `
  <h1>Stack: "${stack.name}"</h1>
  <form>
  <div class="form-group">
    <label for="builder_stack_info_name">Stack Name:</label>
    <input type="text" class="form-control" id="builder_stack_info_name"></input>
  </div>
  <div class="form-group">
    <label for="builder_stack_info_description">Stack Description:</label>
    <textarea name="description" class="form-control" id="builder_stack_info_description" cols="30" rows="5"></textarea>
  </div>
  <div class="form-group">
    <label for="builder_stack_info_publi">Publicly Visible:</label>
    <input type="checkbox" class="form-check-input" id="builder_stack_info_public"></input>
  </div
  <div class="form-group">  
    Last Updated:<span id="builder_stack_info_updated"></span>
  </div>
  </form>
  `;
  const stackName = document.querySelector("#builder_stack_info_name");
  const stackDescription = document.querySelector(
    "#builder_stack_info_description"
  );
  const stackPublic = document.querySelector("#builder_stack_info_public");
  const stackUpdated = document.querySelector("#builder_stack_info_updated");
  stackName.value = stack.name;
  stackDescription.value = stack.description;
  stackPublic.checked = stack.public;
  stackUpdated.innerHTML = stack.updated;

  const submitStackButton = document.createElement("button");
  submitStackButton.classList.add("btn", "btn-primary");

  if (stack.id != null) {
    submitStackButton.innerHTML = "Update";
    submitStackButton.addEventListener("click", () => {
      const stack_info = {
        name: stackName.value,
        description: stackDescription.value,
        public: stackPublic.checked,
        id: stack.id,
      };
      submitStackUpdate(stack_info);
    });
  } else {
    submitStackButton.innerHTML = "Submit New Stack";
    submitStackButton.addEventListener("click", () => {
      const stack_info = {
        name: stackName.value,
        description: stackDescription.value,
        public: stackPublic.checked,
      };
      submitNewStack(stack_info);
    });
  }
  builderStackDiv.appendChild(submitStackButton);
  const cancelSubmitButton = document.createElement("button");
  cancelSubmitButton.classList.add("btn", "btn-secondary", "ms-2");
  cancelSubmitButton.innerHTML = `Cancel <i class="fas fa-window-close"></i>`;
  cancelSubmitButton.addEventListener("click", () => {
    renderIndex();
  });
  builderStackDiv.appendChild(cancelSubmitButton);
}

/**
 * Renders the card list for the stack object
 * @param {object} stack to be parsed into cards
 */
function renderBuilderCards(stack) {
  const builderCardsDiv = document.querySelector("#builder_cards_div");
  builderCardsDiv.innerHTML = `
    <h1>Cards (${stack.cards.length}) <button class="btn btn-primary" id="add-card-button">Add <i class="far fa-plus-square"></i></button></h1> 
  `;
  const default_side_1_direction = "ltr";
  const default_side_2_direction = "rtl";

  const addCardButton = document.querySelector("#add-card-button");
  addCardButton.addEventListener("click", () => {
    const card = {
      stack_id: null,
      side_1: "",
      side_1_direction: default_side_1_direction,
      side_2: "",
      side_2_direction: default_side_2_direction,
      curator_note: "",
    };
    renderCardEditor(card);
  });

  stack.cards.forEach((card) => {
    card.stack_id = stack.id;
    const cardBlock = document.createElement("div");
    cardBlock.innerHTML = `
    <div class="card">
      <div class="card-header">
        <small class="text-muted">Curated by: ${stack.curator} on ${card.curation_date}</small><br>        
      </div>
      <div class="card-body">
        <h5 dir="${card.side_1_direction}">${card.side_1}</h5>
        <hr>
        <h5 dir="${card.side_2_direction}">${card.side_2}</h5>
      </div>
      <div class="card-footer">
        <button class="btn btn-primary" id="edit_card_${card.id}">Edit</button>
        <button class="btn btn-secondary" id="delete_card_${card.id}">Delete</button>
      </div>
    </div>
    `;
    cardBlock.classList.add("col-md-4", "mb-2");
    builderCardsDiv.appendChild(cardBlock);

    const editButton = document.querySelector(`#edit_card_${card.id}`);
    editButton.addEventListener("click", () => {
      renderCardEditor(card);
    });
    const deleteButton = document.querySelector(`#delete_card_${card.id}`);
    deleteButton.addEventListener("click", () => {
      deleteCard(card);
    });
  });
}

/**
 * Sends an API call to delete a card
 * @param {object} card
 */
function deleteCard(card) {
  let endpoint = `card/${card.id}/`;
  let payload = {
    body: JSON.stringify(card),
    method: "DELETE",
    headers: {
      "X-CSRFToken": csrfToken,
    },
  };
  fetch(endpoint, payload)
    .then((response) => response.json())
    .then((data) => {
      // reload original stack
      showBuilder(data.stack);
    });
}

/**
 * Renders the card editor modal
 * @param {object} card
 */
function renderCardEditor(card) {
  let headline = "Edit Card";
  if (card.id == null) {
    headline = "Add Card";
  }
  document.querySelector("#add_card_heading").innerHTML = headline;
  // Prefill inputs
  const side1 = document.querySelector("#edit_side_1");
  side1.value = card.side_1;
  const side1Direction = document.getElementsByName("side_1_direction");
  const side2 = document.querySelector("#edit_side_2");
  side2.value = card.side_2;
  const side2Direction = document.getElementsByName("side_2_direction");
  const curatorNote = document.querySelector("#edit_curator_note");
  curatorNote.value = card.curator_note;

  let side_1_direction = card.side_1_direction;
  side1.style.direction = side_1_direction;

  if (side_1_direction == "ltr") {
    side1Direction[0].checked = true;
  } else {
    side1Direction[1].checked = true;
  }

  let side_2_direction = card.side_2_direction;
  side2.style.direction = side_2_direction;
  if (side_2_direction == "ltr") {
    side2Direction[0].checked = true;
  } else {
    side2Direction[1].checked = true;
  }

  side1Direction.forEach((input) => {
    input.addEventListener("change", () => {
      if (input.checked) {
        side_1_direction = input.value;
        side1.style.direction = input.value;
      }
    });
  });

  side2Direction.forEach((input) => {
    input.addEventListener("change", () => {
      if (input.checked) {
        side_2_direction = input.value;
        side2.style.direction = input.value;
      }
    });
  });

  const addContainer = document.querySelector("#add_card_container");
  addContainer.classList.add("show");

  const cancelButton = document.querySelector("#cancel-edit-card");
  cancelButton.addEventListener("click", () => {
    addContainer.classList.remove("show");
  });

  const submitButton = document.querySelector("#submit-edit-card");
  submitButton.addEventListener("click", function doSubmit() {
    const cardPayload = {
      stack_id: card.stack_id,
      id: card.id,
      side_1: side1.value,
      side_1_direction: side_1_direction,
      side_2: side2.value,
      side_2_direction: side_2_direction,
      curator_note: curatorNote.value,
    };
    submitCardUpdate(cardPayload);
    submitButton.removeEventListener("click", doSubmit);
  });
}

/**
 * API calls to update a card's contents
 * @param {object} card to be updated
 */
function submitCardUpdate(card) {
  const addContainer = document.querySelector("#add_card_container");
  let endpoint = `card/`;
  let payload = {
    body: JSON.stringify(card),
    headers: {
      "X-CSRFToken": csrfToken,
    },
  };
  if (card.id == null) {
    payload.method = "POST";
  } else {
    endpoint = `card/${card.id}/`;
    payload.method = "PATCH";
  }
  fetch(endpoint, payload)
    .then((response) => response.json())
    .then((data) => {
      addContainer.classList.remove("show");
      // reload original stack
      showBuilder(data.stack);
    });
}

/**
 * Makes a new copy of the stack and its cards
 * for the requesting user, then renders the
 * new stack in the stack builder for customization
 * @param {number} stackID ID of the stack to be forked
 */
function forkStack(stackID) {
  const endpoint = `stack/fork/${stackID}/`;
  const stack = {
    stack_id: stackID,
  };
  const payload = {
    method: "POST",
    body: JSON.stringify(stack),
    headers: {
      "X-CSRFToken": csrfToken,
    },
  };
  fetch(endpoint, payload)
    .then((response) => response.json())
    .then((data) => {
      if (data.success) {
        showBuilder(data.stack);
      } else {
        console.log(data.message);
      }
    });
}

/**
 * Shows the read only stack viewer
 * @param {number} stackID ID of the stack
 */
function showStackViewer(stackID) {
  fetchStack(stackID).then((data) => {
    hideIndex();
    hideBuilder();
    hideLearning();
    renderStackViewer(data);
  });
}

/**
 * Renders a read-only view of a stack and its cards
 * @param {object} stack to be viewed
 */
function renderStackViewer(stack) {
  const stackViewerDiv = document.querySelector("#stack_viewer_div");
  stackViewerDiv.innerHTML = `
    <div id="stack_viewer_info" class="text-center">
      <h1>${stack.name}</h1>
      <small>Curated by ${stack.curator}; last updated on ${stack.updated}</small><br>
      <div id="view_stack_actions">
          <button id="view_edit_button" class="btn btn-warning">Edit <i class="fas fa-pen"></i></button>
          <button id="view_delete_button" class="btn btn-secondary">Delete <i class="fas fa-trash"></i></button>
          <button id="view_fork_button" class="btn btn-primary">Fork <i class="fas fa-code-branch"></i></button>
          <button id="view_learn_button" class="btn btn-success">Learn <i class="fas fa-graduation-cap"></i></button>
      </div>
    </div>

    <div class="row cards-list mt-2" id="view_cards_list_div">
    </div>
  `;
  const viewCardsListDiv = document.querySelector("#view_cards_list_div");
  stack.cards.forEach((card) => {
    const cardDiv = document.createElement("div");
    cardDiv.classList.add("col-sm-4", "col-md-3", "mb-2");
    cardDiv.innerHTML = `
      <div class="card stack-block">
        <div class="card-body" dir="${card.side_1_direction}">${card.side_1}</div>
        <hr>
        <div class="card-body" dir="${card.side_2_direction}">${card.side_2}</div>
      </div>
    `;
    viewCardsListDiv.appendChild(cardDiv);
  });

  const viewEditButton = document.querySelector("#view_edit_button");
  const viewDeleteButton = document.querySelector("#view_delete_button");
  const viewForkButton = document.querySelector("#view_fork_button");
  const viewLearnButton = document.querySelector("#view_learn_button");

  if (authenticatedUsername == stack.curator) {
    viewEditButton.addEventListener("click", () => {
      showBuilder(stack);
    });
    viewDeleteButton.addEventListener("click", () => {
      deleteStack(stack.id);
    });
    viewForkButton.style.display = "none";
  } else {
    viewEditButton.style.display = "none";
    viewDeleteButton.style.display = "none";
    if(authenticated){
      viewForkButton.addEventListener("click", () => {
        forkStack(stack.id);
      });
    } else {
      viewForkButton.style.display = "none";
    }
  }
  viewLearnButton.addEventListener("click", () => {
    renderLearning(stack.id);
  });

  stackViewerDiv.style.display = "block";
}

/**
 * Shows the learning exercises menu
 * @param {number} stackID to be retrieved for learning
 */
function renderLearning(stackID) {
  hideBuilder();
  hideIndex();
  hideStackViewer();

  const learnDiv = document.querySelector("#stack_learn_div");
  if (authenticated) {
    fetchStack(stackID).then((data) => {
      learnDiv.style.display = "block";
      learn.renderMenu(data, learnDiv);
    });
  } else {
    learnDiv.innerHTML = `
      Sorry, but this is a premium feature. Please either 
      <a href="/users/login">log in</a> or <a href="/users/register">register</a>.
    `;
    learnDiv.style.display = "block";
  }
  
}
